import test from 'ava'
import crio from 'crio'
import shortid from 'shortid'

import recompute from './recompute-quotation-products.js'

const defaultProduct = crio({foo: `bar`})

test( `add an empty line at the end`, t => {
  const products = crio([])
  const result = recompute({defaultProduct, products })
  t.is( result.length, 1, `a line has been added at the end` )
})

test( `filter and add an empty line at the end`, t => {
  const products = crio([
    defaultProduct.merge(null),
    defaultProduct.set(`foo`, `baz`),
    defaultProduct.merge(null),
    defaultProduct.set(`foo`, `yes`),
  ])
  const result = recompute({defaultProduct, products })
  t.is( result.length, 3, `filtered with an additional line at the end` )
  t.is( result.get(`[0].foo`), `baz`, `first line is ok` )
  t.is( result.get(`[1].foo`), `yes`, `second line is ok` )
  t.is( result.get(`[2].foo`), `bar`, `third line is ok` )
})

test( `return an empty array if nothing is passed`, t => {
  const result = recompute( {} )
  t.true( crio.isArray(result),  `return a crio array` )
  t.is( result.length, 0, `return an empty array` )
})

test( `return an empty array if we don't give a crio array as an input`, t => {
  const products = [ defaultProduct.merge(null) ]
  const result = recompute({products})
  t.true( crio.isArray(result), `return a crio array` )
  t.is( result.length, 0, `return an empty array` )
})

test( `return the original crio array if we don't give a defaultProduct`, t => {
  const products = crio([ defaultProduct.merge(null) ])
  const result = recompute({products})
  t.deepEqual( result, products, `return a crio array` )
})

test( `add _id to elements without one`, t => {
  const products = crio([
    defaultProduct.merge( null, {_id: `id`, foo: `baz`}),
    defaultProduct.set(`foo`, `yes`),
  ])
  const result = recompute({defaultProduct, products })
  t.is( result.length, products.length + 1, `an empty line has been added` )
  t.is( result.get(`[0]._id`), products.get(`[0]._id`), `first id has been kept` )
  t.false( shortid.isValid(result.get(`[0]._id`)), `it wasn't generated by the shortid module` )
  t.not( result.get(`[1]._id`), products.get(`[1]._id`), `second id is different` )
  t.falsy( products.get(`[1]._id`), `second id was not present` )
  t.true( shortid.isValid(result.get(`[1]._id`)), `second id is now present` )
  t.true( shortid.isValid(result.get(`[2]._id`)), `the empty line has an _id too` )
})
