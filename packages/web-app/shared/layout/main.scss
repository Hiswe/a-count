@import '../config-media-queries';

.main {
  $root: &;
  --knockout-max-width: var(--s-max-width);
  --knockout-gutter: minmax(var(--s-gutter), calc(50% - var(--s-max-width) / 2));
  --knockout-overlap-height: var(--s-two-gutter);
  --knockout-meta-bg: var(--c-primary-lightest);
  margin: 0;
  padding: var(--s-gutter) 0;
  background: var(--knockout-bg);
  border: 0;
  display: grid;
  grid-template-columns: [meta-col-start] var(--knockout-gutter) 1fr var(--knockout-gutter) [meta-col-end];
  grid-template-rows: [meta-row-start] auto var(--knockout-overlap-height) [meta-row-end] auto ;
  grid-template-areas: "left-gutter content right-gutter";

  @media #{$mq-print} {
    --knockout-gutter: 0;
    display: block;
    padding: 0;
  }

  &--has-meta {
    padding: 0 0 var(--s-gutter);
    grid-template-areas:
      "left-gutter meta right-gutter"
      "left-gutter content right-gutter"
      "left-gutter content right-gutter"
    ;

    &::before {
      // use a pseudo-element to make the meta background
      // • this remove the need of extra markup
      // • no need to position it in absolute:
      //   the CSS grid will take care of it for us \O/
      content: '';
      border-radius: var(--s-half-gutter) 0 0 var(--s-half-gutter);
      background: var(--knockout-meta-bg);
      grid-row: meta-row-start / meta-row-end;
      grid-column: meta-col-start / meta-col-end;

      @media #{$mq-print} {
        display: none;
      }
    }
  }

  &__meta,
  &__content {
    border: 0;
    margin: 0;
  }
  &__meta {
    grid-area: meta;
    padding: var(--s-gutter) 0;
    @media #{$mq-print} {
      display: none;
    }
  }
  &__content {
    grid-area: content;
    padding: 0;
    z-index: 1;

    &_actions {
      margin-top: var(--s-gutter);

      @media print {
        display: none;
      }
      .button + .button {
        margin-left: var(--s-half-gutter);
      }
    }
  }
}
